# Cero3 Shaper
# A cake shaper and AQM solution for WatchGuard with PBR
# for ethernet gateways

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#       Copyright (C) 2012-5 Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller


#sm: TODO pass in the cake diffserv keyword

. ${SQM_LIB_DIR}/defaults.sh
QDISC=cake

# as in piece_of_cake.qos, we ignore the *_CAKE_OPTS from defaults.sh
# and force all ingress through the one ifb attached to wan interface

# ToDo - remove hard coding of wan interface
# ToDo - setup ibf4eth0 should in deployment the VPN ever get processed before eth0 by the sqm service
# (in testing eth0 is currently processed first so it works).

egress() {
    DEV="ifb4eth0"
    if [ "$IFACE" == "eth0" ]; then
        # apply CAKE on WAN upload (must be besteffort flows nonat nowash to work with the skb->hash preservation)
        EGRESS_CAKE_OPTS="besteffort flows"
        UPLINK="18000"
    else
        # assumes if not eth0 then a ProtonVPN interface
        # apply CAKE on VPN diffserv4 ack-filter
        EGRESS_CAKE_OPTS="diffserv4 triple-isolate nat ack-filter"
        UPLINK="50000"
    fi

    sqm_debug "egress"
    SILENT=1 $TC qdisc del dev $IFACE root
    $TC qdisc add dev $IFACE root $( get_stab_string ) cake \
        bandwidth ${UPLINK}kbit $( get_cake_lla_string ) ${EGRESS_CAKE_OPTS} ${EQDISC_OPTS}
}


ingress() {
    # force differv4 on ingress. re-apply to ifb4$wan_if on VPN
    DEV="ifb4eth0"
    DOWNLINK="65000"
    INGRESS_CAKE_OPTS="diffserv4 triple-isolate nat ingress"
    sqm_debug "ingress"

    SILENT=1 $TC qdisc del dev $IFACE handle ffff: ingress
    $TC qdisc add dev $IFACE handle ffff: ingress

    SILENT=1 $TC qdisc del dev $DEV root

    # these both need setting to 0 in /et/config/sqm
    # i had thought of forcing these too (they default to 1 in luci) but want to allow user some flex
    [ "$IGNORE_DSCP_INGRESS" -eq "1" ] && INGRESS_CAKE_OPTS="$INGRESS_CAKE_OPTS besteffort"
    [ "$ZERO_DSCP_INGRESS" -eq "1" ] && INGRESS_CAKE_OPTS="$INGRESS_CAKE_OPTS wash"

    $TC qdisc add dev $DEV root $( get_stab_string ) cake \
        bandwidth ${DOWNLINK}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}

    $IP link set dev $DEV up

    # if 'wg show' reports an endpoint, then pass over WireGuard packets on WAN and capture all VPN packets and redirect back up to WAN ifb for Cake
    # Assumes wan="eth0"
    wg_endpoint=$(wg show | awk '{if($1 == "endpoint:"){split($2,a,":"); print a[1]}}')
    if [ "$IFACE" == "eth0" ]; then
		$TC filter add dev $IFACE parent ffff: protocol ip prio 1 u32 match ip src ${wg_endpoint}/32 action pass
	fi

    # redirect all IP packets arriving in $IFACE to ifb0
    # DSCPClassify specific code: set DSCP mark from conntrack mark
    # +FIX to SQM: see dscpclassify commit cbfd72d
    # https://lists.bufferbloat.net/pipermail/cake/2019-September/005031.html
	$TC filter add dev $IFACE parent ffff: prio 2 \
        matchall action ctinfo dscp 0x0000003f mirred egress redirect dev $DEV
}

sqm_prepare_script() {
    do_modules
    verify_qdisc $QDISC "cake" || return 1
}
